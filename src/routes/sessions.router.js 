import express from 'express';
import jwt from 'jsonwebtoken';
import passport from 'passport';
import User from '../models/User.js';
import { createHash } from '../utils/hash.js';
const router = express.Router();
const jwtSecret = 'tu_clave_secreta';

// Registro
router.post('/register', async (req, res) => {
  const { first_name, last_name, email, age, password } = req.body;
  const exists = await User.findOne({ email });
  if (exists) return res.status(400).json({ error: 'El usuario ya existe' });

  const user = await User.create({
    first_name,
    last_name,
    email,
    age,
    password: createHash(password)
  });

  res.status(201).json({ message: 'Usuario creado', user });
});

// Login
router.post('/login', (req, res, next) => {
  passport.authenticate('login', { session: false }, (err, user, info) => {
    if (err || !user) return res.status(401).json({ error: 'Credenciales inválidas' });

    const token = jwt.sign({ id: user._id, role: user.role }, jwtSecret, { expiresIn: '1h' });
    res.json({ message: 'Login exitoso', token });
  })(req, res, next);
});

// Current
router.get('/current', passport.authenticate('jwt', { session: false }), (req, res) => {
  const { _id, first_name, last_name, email, role } = req.user;
  res.json({ _id, first_name, last_name, email, role });
});

// Middleware de autenticación con JWT
const auth = passport.authenticate('jwt', { session: false });

//Actualizar usuario por ID
router.put('/:id', auth, async (req, res) => {
  try {
    const { id } = req.params;
    const update = req.body;

    const updatedUser = await User.findByIdAndUpdate(id, update, { new: true });

    if (!updatedUser) return res.status(404).json({ error: 'Usuario no encontrado' });

    res.json({ message: 'Usuario actualizado', user: updatedUser });
  } catch (err) {
    res.status(500).json({ error: 'Error al actualizar el usuario' });
  }
});

//Eliminar usuario por ID
router.delete('/:id', auth, async (req, res) => {
  try {
    const { id } = req.params;

    const deletedUser = await User.findByIdAndDelete(id);

    if (!deletedUser) return res.status(404).json({ error: 'Usuario no encontrado' });

    res.json({ message: 'Usuario eliminado' });
  } catch (err) {
    res.status(500).json({ error: 'Error al eliminar el usuario' });
  }
});

export default router;

